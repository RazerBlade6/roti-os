{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Walkthrough",
  "steps": [
    {
      "file": "src/bin/uefi.s",
      "description": "Set `nasm` to 64-bit mode (by default 16-bit)",
      "line": 1
    },
    {
      "file": "src/bin/uefi.s",
      "description": "`global start` is required to allow the linker to have an actual entry point into the code",
      "line": 7
    },
    {
      "file": "src/bin/uefi.s",
      "description": "**10 - 15:** \nThese lines are also directly from the UEFI Specification \n(See: [Handoff State][1])\n\nThe pointer to the subsytem is provided in `rsp`, the handle to image resources in in `rcx`, pointer to the system table is in `rdx`, so save all these to our defined memory locations\n\nWe also shift the top of stack to allow for four arguments, again, as per the spec.\n\n[1]: https://uefi.org/sites/default/files/resources/UEFI_Spec_2_10_A_Aug8.pdf#G11.1004788",
      "line": 10
    },
    {
      "file": "src/bin/uefi.s",
      "description": "A thick wrapper around getting the handle to our `output` buffer. This is needed to do any kind of printing using the EFI_GRAPHICS_OUTPUT_PROTOCOL",
      "line": 25
    },
    {
      "file": "src/bin/efi_boot_services.s",
      "description": "All functions in this file are thin wrappers around built-in EFI boot-time services",
      "line": 2
    },
    {
      "file": "src/bin/efi_boot_services.s",
      "description": "Finds the first handle in the handle database that supports the requested protocol",
      "line": 1
    },
    {
      "file": "src/bin/efi_boot_services.s",
      "description": "**2-9:**\nThese lines are easier to understand if implemented in C code\n```c\nEFI_SYSTEM_TABLE->BootServices->LocateProtocol(&EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID, *0, **ptrInterface);\n```\n\nThis function will find the first protocol instance that matches the given protocol.\nThe function itself returns a status code, and the location of the protocol is saved to `ptrInterface`\n\nThe assembly written here is just my (probably flawed) translation of this into assembly.",
      "line": 2
    },
    {
      "file": "src/bin/efi_boot_services.s",
      "description": "Equivalent C code:\n\n```c\ngetMemoryMap(*memoryMapSize, *memoryMap, *mapKey, *descriptorSize, *descriptorVersion);\n```\n\nThis function will provide the current memory map (the entire thing).\n\nAs always, returns a status code, and the pointer to the map itself is placed in `memoryMap`, and a bunch of metadata is placed in the other ones. Interestingly, according to the spec, I have to pass the fifth argument \"on the stack\". Not entirely sure what that means, but we sure are doing it. ",
      "line": 16
    },
    {
      "file": "src/bin/efi_boot_services.s",
      "description": "Terminate all boot services.\n\nEquivalent C Code:\n```c\nEFI_SYSTEM_TABLE->BootServices->ExitBootServices(imageHandle, mapKey);\n```\n\nThis is obviously needed to transfer control to a Kernel\n",
      "line": 38
    },
    {
      "file": "src/bin/efi_boot_services.s",
      "description": "!!TODO!!\n\nObviously, this is incomplete, and I'll add more sophisticated Error Handling later",
      "line": 52
    },
    {
      "file": "src/bin/efi_defs.s",
      "description": "Kinda torn on this macro. The alternative is individually defining each error code, which is more verbose but also more idiomatic. Would appreciate any thoughts.",
      "line": 2
    },
    {
      "file": "src/bin/efi_defs.s",
      "description": "A macro to define the EFI_TEXT_ATTRIBUTE field, basically does this:\n```c\nshort attribute = (foreground | background << 4)\n```",
      "line": 81
    },
    {
      "file": "src/bin/efi_defs.s",
      "description": "EFI_TABLE_HEADER is always a member of all tables, it contains metadata that is needed for verification and versioning",
      "line": 87
    },
    {
      "file": "src/bin/efi_defs.s",
      "description": "This is the Heart of the EFI Protocol, it contains pointers to all other EFI services and handles, and pretty much every other part of the UEFI Firmware",
      "line": 100
    },
    {
      "file": "src/bin/efi_defs.s",
      "description": "These are boot-time services, so they will be disabled upon calling the `ExitBootServices` function.",
      "line": 117
    },
    {
      "file": "src/bin/efi_defs.s",
      "description": "These are EFI Runtime services, they will remain available even after control is passed to a kernel.",
      "line": 166
    }
  ],
  "ref": "main"
}